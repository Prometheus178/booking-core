buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:1.5.4.RELEASE"
    }

}

plugins {
    id 'java'
    id 'war'
    id 'org.springframework.boot' version '2.3.1.RELEASE'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'org.liquibase.gradle' version '2.0.4'
}

group = 'org.booking.core'
version = '1.1-SNAPSHOT'
sourceCompatibility = '11'


def databaseProps = new Properties()
file("gradle.properties")
        .withInputStream { databaseProps.load(it) }



configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    //Spring
    providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'
    implementation 'org.springframework.boot:spring-boot-starter-jersey'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation "org.springframework.boot:spring-boot-starter-data-jpa"
    implementation group: 'com.google.code.gson', name: 'gson', version: '2.10.1'

    //Swagger
    implementation 'org.springdoc:springdoc-openapi-ui:1.6.15'

    //Database
    runtimeOnly "org.postgresql:postgresql"

    //Liquibase
    implementation 'org.liquibase:liquibase-core:4.20.0'

    liquibaseRuntime 'org.liquibase:liquibase-core:4.20.0'
    liquibaseRuntime 'org.postgresql:postgresql'
    liquibaseRuntime 'ch.qos.logback:logback-core:1.4.7'
    liquibaseRuntime 'ch.qos.logback:logback-classic:1.4.7'
    liquibaseRuntime 'org.liquibase.ext:liquibase-hibernate5:4.20.0'
    liquibaseRuntime 'org.springframework.data:spring-data-jpa'
    liquibaseRuntime 'org.springframework.boot:spring-boot'
    liquibaseRuntime 'org.yaml:snakeyaml:2.0'

    liquibaseRuntime sourceSets.main.output

    //Lombok
    compileOnly 'org.projectlombok:lombok:1.18.26'
    annotationProcessor 'org.projectlombok:lombok:1.18.26'

    //MapStruct
    implementation 'org.mapstruct:mapstruct:1.5.3.Final'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.3.Final'

    //Gson
    implementation group: 'com.google.code.gson', name: 'gson', version: '2.10.1'

    //Test
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation ('io.rest-assured:rest-assured:5.4.0'){
        exclude group: 'org.apache.groovy', module: 'groovy'
        exclude group: 'org.apache.groovy', module: 'groovy-xml'
    }
    testImplementation 'io.rest-assured:json-path:5.4.0'
    testImplementation 'io.rest-assured:xml-path:5.4.0'
    testImplementation group: 'org.assertj', name: 'assertj-core', version: '3.24.2'
    testImplementation group: 'org.instancio', name: 'instancio-junit', version: '3.7.1'

}

if (!project.hasProperty("runList")) {
    project.ext.runList = "main"
    //project.ext.runList = "diffChangeLog"
}

File newChangeLogFile =  new File("src/main/resources/db/changelog/" + new Date().format ("yyyyMMddHHmmss") + "_changelog.yml")
project.ext.diffChangelogFile = "src/main/resources/config/liquibase/changelog/" + new Date().format("yyyyMMddHHmmss") + "_changelog.yml"

liquibase {
    activities {
        main {
            changeLogFile "build/resources/main/db/changelog/db.changelog-master.yml"
            url databaseProps.getProperty("url")
            username databaseProps.getProperty("username")
            password databaseProps.getProperty("password")
            referenceUrl 'hibernate:spring:org.booking.core.domain.entity?dialect=org.hibernate.dialect.PostgreSQLDialect&hibernate.physical_naming_strategy=org.springframework.boot.orm.jpa.hibernate.SpringPhysicalNamingStrategy&hibernate.implicit_naming_strategy=org.springframework.boot.orm.jpa.hibernate.SpringImplicitNamingStrategy'
            logLevel "info"
        }
//        diffChangeLog {
//            changeLogFile newChangeLogFile
//            url databaseProps.getProperty("url")
//            username databaseProps.getProperty("username")
//            password databaseProps.getProperty("password")
//            referenceUrl 'hibernate:spring:org.booking.core.domain.entity?dialect=org.hibernate.dialect.PostgreSQLDialect&hibernate.physical_naming_strategy=org.springframework.boot.orm.jpa.hibernate.SpringPhysicalNamingStrategy&hibernate.implicit_naming_strategy=org.springframework.boot.orm.jpa.hibernate.SpringImplicitNamingStrategy'
//            logLevel "info"
//        }
    }
    runList = project.ext.runList
}
sourceSets.main.java.srcDir "$buildDir/booking-core/src/main/java"
sourceSets.main.resources.srcDir "$buildDir/booking-core/src/main/resources"

tasks.named('test') {
    useJUnitPlatform()
    exclude '/org/booking/core/api/**'
}

build.dependsOn update
